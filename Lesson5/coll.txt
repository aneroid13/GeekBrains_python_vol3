    db.user.find().help() - show DBCursor help
    db.user.bulkWrite( operations, <optional params> ) - bulk execute write operations, optional parameters are: w, wtimeout, j
    db.user.count( query = {}, <optional params> ) - count the number of documents that matches the query, optional parameters are: limit, skip, hint, maxTimeMS
    db.user.countDocuments( query = {}, <optional params> ) - count the number of documents that matches the query, optional parameters are: limit, skip, hint, maxTimeMS
    db.user.estimatedDocumentCount( <optional params> ) - estimate the document count using collection metadata, optional parameters are: maxTimeMS
    db.user.copyTo(newColl) - duplicates collection by copying all documents to newColl; no indexes are copied.
    db.user.convertToCapped(maxBytes) - calls {convertToCapped:'user', size:maxBytes}} command
    db.user.createIndex(keypattern[,options])
    db.user.createIndexes([keypatterns], <options>)
    db.user.dataSize()
    db.user.deleteOne( filter, <optional params> ) - delete first matching document, optional parameters are: w, wtimeout, j
    db.user.deleteMany( filter, <optional params> ) - delete all matching documents, optional parameters are: w, wtimeout, j
    db.user.distinct( key, query, <optional params> ) - e.g. db.user.distinct( 'x' ), optional parameters are: maxTimeMS
    db.user.drop() drop the collection
    db.user.dropIndex(index) - e.g. db.user.dropIndex( "indexName" ) or db.user.dropIndex( { "indexKey" : 1 } )
    db.user.dropIndexes()
    db.user.ensureIndex(keypattern[,options]) - DEPRECATED, use createIndex() instead
    db.user.explain().help() - show explain help
    db.user.reIndex()
    db.user.find([query],[fields]) - query is an optional query filter. fields is optional set of fields to return.
                                                  e.g. db.user.find( {x:77} , {name:1, x:1} )
    db.user.find(...).count()
    db.user.find(...).limit(n)
    db.user.find(...).skip(n)
    db.user.find(...).sort(...)
    db.user.findOne([query], [fields], [options], [readConcern])
    db.user.findOneAndDelete( filter, <optional params> ) - delete first matching document, optional parameters are: projection, sort, maxTimeMS
    db.user.findOneAndReplace( filter, replacement, <optional params> ) - replace first matching document, optional parameters are: projection, sort, maxTimeMS, upsert, returnNewDocument
    db.user.findOneAndUpdate( filter, update, <optional params> ) - update first matching document, optional parameters are: projection, sort, maxTimeMS, upsert, returnNewDocument
    db.user.getDB() get DB object associated with collection
    db.user.getPlanCache() get query plan cache associated with collection
    db.user.getIndexes()
    db.user.group( { key : ..., initial: ..., reduce : ...[, cond: ...] } )
    db.user.insert(obj)
    db.user.insertOne( obj, <optional params> ) - insert a document, optional parameters are: w, wtimeout, j
    db.user.insertMany( [objects], <optional params> ) - insert multiple documents, optional parameters are: w, wtimeout, j
    db.user.mapReduce( mapFunction , reduceFunction , <optional params> )
    db.user.aggregate( [pipeline], <optional params> ) - performs an aggregation on a collection; returns a cursor
    db.user.remove(query)
    db.user.replaceOne( filter, replacement, <optional params> ) - replace the first matching document, optional parameters are: upsert, w, wtimeout, j
    db.user.renameCollection( newName , <dropTarget> ) renames the collection.
    db.user.runCommand( name , <options> ) runs a db command with the given name where the first param is the collection name
    db.user.save(obj)
    db.user.stats({scale: N, indexDetails: true/false, indexDetailsKey: <index key>, indexDetailsName: <index name>})
    db.user.storageSize() - includes free space allocated to this collection
    db.user.totalIndexSize() - size in bytes of all the indexes
    db.user.totalSize() - storage allocated for all data and indexes
    db.user.update( query, object[, upsert_bool, multi_bool] ) - instead of two flags, you can pass an object with fields: upsert, multi
    db.user.updateOne( filter, update, <optional params> ) - update the first matching document, optional parameters are: upsert, w, wtimeout, j
    db.user.updateMany( filter, update, <optional params> ) - update all matching documents, optional parameters are: upsert, w, wtimeout, j
    db.user.validate( <full> ) - SLOW
    db.user.getShardVersion() - only for use with sharding
    db.user.getShardDistribution() - prints statistics about data distribution in the cluster
    db.user.getSplitKeysForChunks( <maxChunkSize> ) - calculates split points over all chunks and returns splitter function
    db.user.getWriteConcern() - returns the write concern used for any operations on this collection, inherited from server/db if set
    db.user.setWriteConcern( <write concern doc> ) - sets the write concern for writes to the collection
    db.user.unsetWriteConcern( <write concern doc> ) - unsets the write concern for writes to the collection
    db.user.latencyStats() - display operation latency histograms for this collection
